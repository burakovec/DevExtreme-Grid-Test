@model IEnumerable<Order>
@{
    ViewData["Title"] = "Mode";
}

<style>
    #grid {
        position: relative;
    }

    #grid-container {
        margin-top: 10px;
    }

    #select-prefix {
        width: 150px;
        display: inline-block;
        vertical-align: middle;
    }

    .selected-data {
        margin-top: 20px;
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
    }

        .selected-data .caption {
            font-weight: bold;
            font-size: 115%;
        }
</style>
<div style="margin:30px;">
    <div id="grid">
        @(Html.DevExtreme().SelectBox()
            .ID("select-prefix")
            .DataSource(new[] { "All", "Dr.", "Mr.", "Mrs.", "Ms." })
            .Placeholder("Select title")
            .OnValueChanged("selectBox_valueChanged")
        )
        @(Html.DevExtreme().Button()
            .ID("grid-clear-selection")
            .Text("Clear Selection")
            .Disabled(true)
            .OnClick("button_click")
        )
        @(Html.DevExtreme().DataGrid<Order>()
            .ID("grid-container")
            .ShowBorders(true)
            .DataSource(Model, new[] { "CustomerID" })
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .Columns(columns =>
                    {
                columns.AddFor(m => m.CustomerID)
                    .Width(70);

                columns.AddFor(m => m.CustomerName);

                columns.AddFor(m => m.OrderDate);

                columns.AddFor(m => m.OrderID)
                    .Width(180);

                columns.AddFor(m => m.ShipCity)
                    .Width(125);

                columns.AddFor(m => m.ShipCountry)
                    .Width(125);
            })
            .OnSelectionChanged("selection_changed")

        )
        <div class="selected-data">
            <span class="caption">Selected Records:</span>
            <span id="selectedItemsContainer">Nobody has been selected</span>
        </div>
    </div>
</div>
<script>
    var changedBySelectBox;

    function getDataGridInstance() {
        return $("#grid-container").dxDataGrid("instance");
    }

    function selection_changed(selectedItems) {
        var data = selectedItems.selectedRowsData;
        if (data.length > 0)
            $("#selectedItemsContainer").text(
                $.map(data, function (value) {
                    return value.CustomerName + " " + value.OrderDate;
                }).join(", "));
        else
            $("#selectedItemsContainer").text("Nobody has been selected");
        if (!changedBySelectBox)
            $("#select-prefix").data("dxSelectBox").option("value", null);

        changedBySelectBox = false;
        $("#grid-clear-selection").dxButton("instance").option("disabled", !data.length);
    }

    function selectBox_valueChanged(data) {
        if (!data.value)
            return;

        var dataGrid = getDataGridInstance();

        changedBySelectBox = true;
        if (data.value == "All") {
            dataGrid.selectAll();
        } else {
            var employeesToSelect = $.map(dataGrid.getDataSource().items(), function (item) {
                if (item.Prefix === data.value) {
                    return item.ID;
                }
            });

            dataGrid.selectRows(employeesToSelect);
        }
    }

    function button_click() {
        getDataGridInstance().clearSelection();
    }
</script>
